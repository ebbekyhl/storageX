configfile: "config.yaml"

wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    year="[0-9]+m?",
    clusters="[0-9]+m?",
    lv="[a-z0-9\.]+",
    opts="[-+a-zA-Z0-9]*",    
    sector_opts="[-+a-zA-Z0-9\.\s]*"
    #sectors="[+a-zA-Z0-9]+",

subworkflow pypsaeur:
    workdir: "../pypsa-eur"
    snakefile: "../pypsa-eur/Snakefile"
    configfile: "../pypsa-eur/config.yaml"

rule all:
    input:
        config['summary_dir'] + '/' + config['run'] + '/csvs/sspace.csv'
        # config['summary_dir'] + '/' + config['run'] + '/graphs/balances-energy.pdf'

rule solve_all_networks:
    input:
        expand(config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
               **config['scenario'])

# rule prepare_sector_networks:
#     input:
#         expand(config['results_dir'] + config['run'] + "/prenetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
#                  **config['scenario'])

rule prepare_sector_networks:
    input:
        expand(config['results_dir'] + config['run'] + "/prenetworks/ref_{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}.nc",
                 **config['scenario'])

rule build_population_layouts:
    input:
        nuts3_shapes=pypsaeur('resources/nuts3_shapes.geojson'),
        urban_percent="data/urban_percent.csv"
    output:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc"
    resources: mem_mb=20000
    script: "scripts/build_population_layouts.py"

rule build_clustered_population_layouts:
    input:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc",
        regions_onshore=pypsaeur('resources/regions_onshore_elec_s{simpl}_y{year}_n{clusters}.geojson')
    output:
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv"
    resources: mem_mb=10000
    script: "scripts/build_clustered_population_layouts.py"

rule build_simplified_population_layouts:
    input:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc",
        regions_onshore=pypsaeur('resources/regions_onshore_elec_s{simpl}_y{year}.geojson')
    output:
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}.csv"
    resources: mem_mb=10000
    script: "scripts/build_clustered_population_layouts.py"

rule build_heat_demands:
    input:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc",
        regions_onshore=pypsaeur("resources/regions_onshore_elec_s{simpl}_y{year}_n{clusters}.geojson")
    output:
        heat_demand_urban="resources/heat_demand_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        heat_demand_rural="resources/heat_demand_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        heat_demand_total="resources/heat_demand_total_elec_s{simpl}_y{year}_n{clusters}.nc"
    resources: mem_mb=20000
    script: "scripts/build_heat_demand.py"

rule build_temperature_profiles:
    input:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc",
        regions_onshore=pypsaeur("resources/regions_onshore_elec_s{simpl}_y{year}_n{clusters}.geojson")
    output:
        temp_soil_total="resources/temp_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_rural="resources/temp_soil_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_urban="resources/temp_soil_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_total="resources/temp_air_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_rural="resources/temp_air_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_urban="resources/temp_air_urban_elec_s{simpl}_y{year}_n{clusters}.nc"
    resources: mem_mb=20000
    script: "scripts/build_temperature_profiles.py"

rule build_cop_profiles:
    input:
        temp_soil_total="resources/temp_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_rural="resources/temp_soil_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_urban="resources/temp_soil_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_total="resources/temp_air_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_rural="resources/temp_air_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_urban="resources/temp_air_urban_elec_s{simpl}_y{year}_n{clusters}.nc"
    output:
        cop_soil_total="resources/cop_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_soil_rural="resources/cop_soil_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_soil_urban="resources/cop_soil_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_total="resources/cop_air_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_rural="resources/cop_air_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_urban="resources/cop_air_urban_elec_s{simpl}_y{year}_n{clusters}.nc"
    resources: mem_mb=20000
    script: "scripts/build_cop_profiles.py"

rule build_solar_thermal_profiles:
    input:
        pop_layout_total="resources/pop_layout_total.nc",
        pop_layout_urban="resources/pop_layout_urban.nc",
        pop_layout_rural="resources/pop_layout_rural.nc",
        regions_onshore=pypsaeur("resources/regions_onshore_elec_s{simpl}_y{year}_n{clusters}.geojson")
    output:
        solar_thermal_total="resources/solar_thermal_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        solar_thermal_urban="resources/solar_thermal_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        solar_thermal_rural="resources/solar_thermal_rural_elec_s{simpl}_y{year}_n{clusters}.nc"
    resources: mem_mb=20000
    script: "scripts/build_solar_thermal_profiles.py"

rule build_energy_totals:
    input:
        nuts3_shapes=pypsaeur('resources/nuts3_shapes.geojson')
    output:
        energy_name='resources/energy_totals.csv',
	co2_name='resources/co2_totals.csv',
	transport_name='resources/transport_data.csv'
    threads: 1
    resources: mem_mb=10000
    script: 'scripts/build_energy_totals.py'

rule build_biomass_potentials:
    input:
        jrc_potentials="data/biomass/JRC Biomass Potentials.xlsx"
    output:
        biomass_potentials_all='resources/biomass_potentials_all.csv',
        biomass_potentials='resources/biomass_potentials.csv'
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_biomass_potentials.py'

rule build_ammonia_production:
    input:
        usgs="data/myb1-2017-nitro.xls"
    output:
        ammonia_production="resources/ammonia_production.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_ammonia_production.py'

rule build_industry_sector_ratios:
    input:
        ammonia_production="resources/ammonia_production.csv"
    output:
        industry_sector_ratios="resources/industry_sector_ratios.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industry_sector_ratios.py'

rule build_industrial_production_per_country:
    input:
        ammonia_production="resources/ammonia_production.csv"
    output:
        industrial_production_per_country="resources/industrial_production_per_country.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_production_per_country.py'

rule build_industrial_production_per_country_tomorrow:
    input:
        industrial_production_per_country="resources/industrial_production_per_country.csv"
    output:
        industrial_production_per_country_tomorrow="resources/industrial_production_per_country_tomorrow.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_production_per_country_tomorrow.py'

rule build_industrial_distribution_key:
    input:
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv",
        europe_shape=pypsaeur('resources/europe_shape.geojson'),
        hotmaps_industrial_database="data/Industrial_Database.csv",
        network=pypsaeur('networks/elec_s{simpl}_y{year}_n{clusters}.nc')
    output:
        industrial_distribution_key="resources/industrial_distribution_key_elec_s{simpl}_y{year}_n{clusters}.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_distribution_key.py'

rule build_industrial_production_per_node:
    input:
        industrial_distribution_key="resources/industrial_distribution_key_elec_s{simpl}_y{year}_n{clusters}.csv",
        industrial_production_per_country_tomorrow="resources/industrial_production_per_country_tomorrow.csv"
    output:
        industrial_production_per_node="resources/industrial_production_elec_s{simpl}_y{year}_n{clusters}.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_production_per_node.py'

rule build_industrial_energy_demand_per_node:
    input:
        industry_sector_ratios="resources/industry_sector_ratios.csv",
        industrial_production_per_node="resources/industrial_production_elec_s{simpl}_y{year}_n{clusters}.csv",
        industrial_energy_demand_per_node_today="resources/industrial_energy_demand_today_elec_s{simpl}_y{year}_n{clusters}.csv"
    output:
        industrial_energy_demand_per_node="resources/industrial_energy_demand_elec_s{simpl}_y{year}_n{clusters}.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_energy_demand_per_node.py'

rule build_industrial_energy_demand_per_country_today:
    input:
        ammonia_production="resources/ammonia_production.csv",
        industrial_production_per_country="resources/industrial_production_per_country.csv"
    output:
        industrial_energy_demand_per_country_today="resources/industrial_energy_demand_per_country_today.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_energy_demand_per_country_today.py'

rule build_industrial_energy_demand_per_node_today:
    input:
        industrial_distribution_key="resources/industrial_distribution_key_elec_s{simpl}_y{year}_n{clusters}.csv",
        industrial_energy_demand_per_country_today="resources/industrial_energy_demand_per_country_today.csv"
    output:
        industrial_energy_demand_per_node_today="resources/industrial_energy_demand_today_elec_s{simpl}_y{year}_n{clusters}.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_energy_demand_per_node_today.py'

rule build_industrial_energy_demand_per_country:
    input:
        industry_sector_ratios="resources/industry_sector_ratios.csv",
        industrial_production_per_country="resources/industrial_production_per_country_tomorrow.csv"
    output:
        industrial_energy_demand_per_country="resources/industrial_energy_demand_per_country.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_energy_demand_per_country.py'

rule build_industrial_demand:
    input:
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv",
        industrial_demand_per_country="resources/industrial_energy_demand_per_country.csv"
    output:
        industrial_demand="resources/industrial_demand_elec_s{simpl}_y{year}_n{clusters}.csv"
    threads: 1
    resources: mem_mb=1000
    script: 'scripts/build_industrial_demand.py'

rule build_retro_cost:
    input:
        building_stock="data/retro/data_building_stock.csv",
        u_values_PL="data/retro/u_values_poland.csv",
        tax_w="data/retro/electricity_taxes_eu.csv",
        construction_index="data/retro/comparative_level_investment.csv",
        average_surface="data/retro/average_surface_components.csv",
        floor_area_missing="data/retro/floor_area_missing.csv",
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv",
        cost_germany="data/retro/retro_cost_germany.csv",
        window_assumptions="data/retro/window_assumptions.csv"
    output:
        retro_cost="resources/retro_cost_elec_s{simpl}_y{year}_n{clusters}.csv",
        floor_area="resources/floor_area_elec_s{simpl}_y{year}_n{clusters}.csv"
    resources: mem_mb=1000
    script: "scripts/build_retro_cost.py"

rule prepare_sector_network:
    input:
        network=pypsaeur('networks/elec_s{simpl}_y{year}_n{clusters}_ec_lv{lv}_{opts}.nc'),
        energy_totals_name='resources/energy_totals.csv',
        co2_totals_name='resources/co2_totals.csv',
        transport_name='resources/transport_data.csv',
        traffic_data = "data/emobility/",
        biomass_potentials='resources/biomass_potentials.csv',
        timezone_mappings='data/timezone_mappings.csv',
        heat_profile="data/heat_load_profile_BDEW.csv",
        costs="../technology-data/outputs/costs_{planning_horizons}.csv",
        h2_cavern = "data/hydrogen_salt_cavern_potentials.csv",
        profile_offwind_ac=pypsaeur("resources/profile_offwind-ac_y{year}.nc"),
        profile_offwind_dc=pypsaeur("resources/profile_offwind-dc_y{year}.nc"),
        busmap_s=pypsaeur("resources/busmap_elec_s{simpl}_y{year}.csv"),
        busmap=pypsaeur("resources/busmap_elec_s{simpl}_y{year}_n{clusters}.csv"),
        clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv",
        simplified_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}.csv",
        industrial_demand="resources/industrial_energy_demand_elec_s{simpl}_y{year}_n{clusters}.csv",
        heat_demand_urban="resources/heat_demand_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        heat_demand_rural="resources/heat_demand_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        heat_demand_total="resources/heat_demand_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_total="resources/temp_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_rural="resources/temp_soil_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_soil_urban="resources/temp_soil_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_total="resources/temp_air_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_rural="resources/temp_air_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        temp_air_urban="resources/temp_air_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_soil_total="resources/cop_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_soil_rural="resources/cop_soil_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_soil_urban="resources/cop_soil_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_total="resources/cop_air_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_rural="resources/cop_air_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        cop_air_urban="resources/cop_air_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        solar_thermal_total="resources/solar_thermal_total_elec_s{simpl}_y{year}_n{clusters}.nc",
        solar_thermal_urban="resources/solar_thermal_urban_elec_s{simpl}_y{year}_n{clusters}.nc",
        solar_thermal_rural="resources/solar_thermal_rural_elec_s{simpl}_y{year}_n{clusters}.nc",
        retro_cost_energy = "resources/retro_cost_elec_s{simpl}_y{year}_n{clusters}.csv",
        floor_area = "resources/floor_area_elec_s{simpl}_y{year}_n{clusters}.csv"
    output: config['results_dir']  +  config['run'] + '/prenetworks/ref_{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}.nc' #elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc'
    threads: 1
    resources: mem_mb=2000
    benchmark: config['results_dir'] + config['run'] + "/benchmarks/prepare_network/ref_{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}" # elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}"
    script: "scripts/prepare_sector_network.py"

# rule plot_network:
#    input:
#        network=config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc"
#    output:
#        map=config['results_dir'] + config['run'] + "/maps/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_costs-all_{planning_horizons}.pdf",
#     #    today=config['results_dir'] + config['run'] + "/maps/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}-today.pdf",
#     #    series=config['results_dir'] + config['run'] + "/maps/series-elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}-today.pdf",
#     #    fourier=config['results_dir'] + config['run'] + "/maps/fourier-elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}-today.pdf",
#     #    series_VRE=config['results_dir'] + config['run'] + "/maps/series_VRE-elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}-today.pdf",
#     #    storage=config['results_dir'] + config['run'] + "/maps/storage-elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}-today.pdf"
#    threads: 2
#    resources: mem_mb=10000
#    script: "scripts/plot_network.py"

rule copy_config:
    output:
        config=config['summary_dir'] + '/' + config['run'] + '/configs/config.yaml'
    threads: 1
    resources: mem_mb=1000
    script:
        'scripts/copy_config.py'

rule make_summary:
    input:
        networks=expand(config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
                  **config['scenario']),
        costs=config['costs_dir'] + "costs_{}.csv".format(config['scenario']['planning_horizons'][0]),
        # plots=expand(config['results_dir'] + config['run'] + "/maps/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_costs-all_{planning_horizons}.pdf",
        #      **config['scenario']),
    output:
        sspace = config['summary_dir'] + '/' + config['run'] + '/csvs/sspace.csv',
        # costs=config['summary_dir'] + '/' + config['run'] + '/csvs/costs.csv',
        # supply_energy=config['summary_dir'] + '/' + config['run'] + '/csvs/supply_energy.csv',
        # metrics=config['summary_dir'] + '/' + config['run'] + '/csvs/metrics.csv',        
    threads: 2
    resources: mem_mb=100000
    script:
        'scripts/make_summary.py'

# rule design_space_function_for_prime:
#     input:
#         sspace = config['summary_dir'] + '/' + config['run'] + '/csvs/sspace.csv',
#         networks=expand(config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
#                   **config['scenario'])
#     output:   
#         load_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/load_timeseries.csv',
#         onwind_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/onwind_timeseries.csv',
#         offwind_ac_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/offwind_ac_timeseries.csv',
#         offwind_dc_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/offwind_dc_timeseries.csv',
#         solar_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/solar_timeseries.csv',
#         solar_roof_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/solar_roof_timeseries.csv',
#         ror_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/ror_timeseries.csv',
#         hydro_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/hydro_timeseries.csv',
#         phs_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/phs_timeseries.csv',
#         charge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/charge_timeseries.csv',
#         discharge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/discharge_timeseries.csv',
#         homebattery_discharge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/homebattery_discharge_timeseries.csv',
#         battery_discharge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/battery_discharge_timeseries.csv',
#         homebattery_charge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/homebattery_charge_timeseries.csv',
#         battery_charge_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/battery_charge_timeseries.csv',
#         e_battery_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/e_battery_timeseries.csv',
#         battery_ecaps = config['summary_dir'] + '/' + config['run'] + '/csvs/battery_ecaps.csv',
#         gas_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/gas_timeseries.csv',
#         h2_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/h2_timeseries.csv',
#         h2_ecaps = config['summary_dir'] + '/' + config['run'] + '/csvs/h2_ecaps.csv',
#         import_ac_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/import_ac_timeseries.csv',
#         import_dc_timeseries = config['summary_dir'] + '/' + config['run'] + '/csvs/import_dc_timeseries.csv',
#         map_power = config['summary_dir'] + '/' + config['run'] + '/maps/power_capacities.pdf',
#         map_storage = config['summary_dir'] + '/' + config['run'] + '/maps/storage_capacities.pdf',
#         map_elec_gen = config['summary_dir'] + '/' + config['run'] + '/maps/electricity_generation.pdf',
#         map_loads = config['summary_dir'] + '/' + config['run'] + '/maps/loads_and_links.pdf',
#         map_renpot = config['summary_dir'] + '/' + config['run'] + '/maps/renewable_potential.pdf'
#     threads: 2
#     resources: mem_mb=30000
#     script:
#         'scripts/design_space_function_for_prime.py'

# rule plot_summary:
#     input:
#         costs=config['summary_dir'] + '/' + config['run'] + '/csvs/costs.csv',
#         balances=config['summary_dir'] + '/' + config['run'] + '/csvs/supply_energy.csv',
#     output:
#         costs=config['summary_dir'] + '/' + config['run'] + '/graphs/costs.pdf',
#         balances=config['summary_dir'] + '/' + config['run'] + '/graphs/balances-energy.pdf',
#     threads: 2
#     resources: mem_mb=10000
#     script:
#         'scripts/plot_summary.py'

if config["foresight"] == "overnight":

    rule solve_network:
        input:
            network=config['results_dir'] + config['run'] + "/prenetworks/ref_{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}.nc", #elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
            costs=config['costs_dir'] + "costs_{planning_horizons}.csv",
            config=config['summary_dir'] + '/' + config['run'] + '/configs/config.yaml'
        output: 
            config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc"
        shadow: "shallow"
        log: # I have replaced elec with "elec" since we have not defined this wildcard in the config file
            solver=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_solver.log",
            python=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_python.log",
            memory=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_memory.log"
        benchmark: config['results_dir'] + config['run'] + "/benchmarks/solve_network/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}"
        threads: 4
        resources: mem_mb=config['solving']['mem']
        # group: "solve" # with group, threads is ignored https://bitbucket.org/snakemake/snakemake/issues/971/group-job-description-does-not-contain
        script: "scripts/solve_network.py"

# if config["foresight"] == "myopic":

#     rule add_existing_baseyear:
#         input:
#             network=config['results_dir']  +  config['run'] + '/prenetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc',
#             powerplants=pypsaeur('resources/powerplants.csv'),
#             busmap_s=pypsaeur("resources/busmap_elec_s{simpl}_y{year}.csv"),
#             busmap=pypsaeur("resources/busmap_elec_s{simpl}_y{year}_n{clusters}.csv"),
#             clustered_pop_layout="resources/pop_layout_elec_s{simpl}_y{year}_n{clusters}.csv",
#             costs=config['costs_dir'] + "costs_{}.csv".format(config['scenario']['planning_horizons'][0]),
#             cop_soil_total="resources/cop_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
#             cop_air_total="resources/cop_air_total_elec_s{simpl}_y{year}_n{clusters}.nc"
#         output: config['results_dir']  +  config['run'] + '/prenetworks-brownfield/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc'
#         wildcard_constraints:
#             planning_horizons=config['scenario']['planning_horizons'][0] #only applies to baseyear
#         threads: 1
#         resources: mem_mb=2000
#         script: "scripts/add_existing_baseyear.py"

#     def process_input(wildcards):
#         i = config["scenario"]["planning_horizons"].index(int(wildcards.planning_horizons))
#         return config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_" + str(config["scenario"]["planning_horizons"][i-1]) + ".nc"

#     rule add_brownfield:
#         input:
#             network=config['results_dir']  +  config['run'] + '/prenetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc',
#             network_p=process_input, #solved network at previous time step
#             costs=config['costs_dir'] + "costs_{planning_horizons}.csv",
#             cop_soil_total="resources/cop_soil_total_elec_s{simpl}_y{year}_n{clusters}.nc",
#             cop_air_total="resources/cop_air_total_elec_s{simpl}_y{year}_n{clusters}.nc"

#         output: config['results_dir'] + config['run'] + "/prenetworks-brownfield/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc"
#         threads: 4
#         resources: mem_mb=10000
#         script: "scripts/add_brownfield.py"

#     ruleorder: add_existing_baseyear > add_brownfield

#     rule solve_network_myopic:
#         input:
#             network=config['results_dir'] + config['run'] + "/prenetworks-brownfield/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}.nc",
#             costs=config['costs_dir'] + "costs_{planning_horizons}.csv",
#             config=config['summary_dir'] + '/' + config['run'] + '/configs/config.yaml'
#         output: config['results_dir'] + config['run'] + "/postnetworks/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_-{planning_horizons}.nc"
#         shadow: "shallow"
#         log:
#             solver=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_solver.log",
#             python=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_python.log",
#             memory=config['results_dir'] + config['run'] + "/logs/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}_memory.log"
#         benchmark: config['results_dir'] + config['run'] + "/benchmarks/solve_network/elec_s{simpl}_y{year}_n{clusters}_lv{lv}_{opts}_{sector_opts}-X Charge+e{charge_e}-X Charge+c{charge_c}-X Discharge+e{discharge_e}-X Discharge+c{discharge_c}-X Store+c{storage_c}-standingloss+{sloss}_{planning_horizons}"
#         threads: 4
#         resources: mem_mb=config['solving']['mem']
#         script: "scripts/solve_network.py"